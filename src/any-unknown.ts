// any 타입
// any 타입은 타입스크립트에서만 제공되는 특별한 타입으로 타입 검사를 받지 않는 특수한 치트키 타입

// let anyVar = 10;
// anyVar = "hello"; // 오류 발생!

// 타입스크립트에서는 변수의 타입이 변수를 초기화할 때 초기화 하는 값을 기준으로 추론하기 때문에 이렇게 하면 오류가 발생

let anyVar: any = 10;
anyVar = 'hello';
anyVar = true;
anyVar = {};

anyVar.toUpperCase();
anyVar.toFixed();
anyVar.a;

//  any 타입의 값은 어떤 타입으로 정의된 변수던 문제 없이 다 할당할 수 있습니다. 
// 따라서 다음과 같이 number 타입의 변수 num에 any 타입의 값 anyVar를 할당해도 문제가 발생하지 않습니다.
let num: number = 10;
num = anyVar;

// 하지만 tsc로 실행해보면 런타임 오류가 발생합니다.
// any 타입은 타입 검사를 받지 않는 타입이므로 모든 타입스크립트의 문법과 규칙으로부터 자유롭지만 그만큼 위험한 타입입니다. 
// 따라서 정말 어쩔 수 없는 경우를 제외하고는 any 타입을 사용하지 않는것을 강력히 권장합니다.


// unknown 타입
// any 타입과 비슷하지만 보다 안전한 타입입니다.
// unknown 타입의 변수는 다음과 같이 어떤 타입의 값이든 다 저장할 수 있습니다.

let unknownVar: unknown;

unknownVar = "";
unknownVar = 1;
unknownVar = () => { };

// 그러나 반대로는 안됩니다. unknown 타입의 값은 어떤 타입의 변수에도 저장할 수 없습니다.
// num = unknownVar; // 오류 !
// 또 unknown 타입의 값은 어떤 연산에도 참여할 수 없으며, 어떤 메서드도 사용할 수 없습니다.

// 정리하자면 unknown 타입은 독특하게도 변수의 타입으로 정의되면 모든 값을 할당받을 수 있게 되지만, 
// 반대로 unknown 타입의 값은 그 어떤 타입의 변수에도 할당할 수 없고, 모든 연산에 참가할 수 없게 됩니다. 
// 쉽게 정리하면 오직 값을 저장하는 행위밖에 할 수 없게 됩니다.

// unknownVar * 2; => 오류

if (typeof unknownVar === 'number') {
    unknownVar * 2;
}

// 참고로 타입스크립트에서는 위 코드처럼 조건문을 이용해 특정 값이 특정 타입임을 보장할 수 있게 되면 
// 해당 값의 타입이 자동으로 바뀝니다. 이를 타입 좁히기라고 합니다.

// 따라서 특정 변수가 당장 어떤 값을 받게 될 지 모른다면 
// any 타입으로 정의하는 것 보단 unknown 타입을 이용하는게 훨씬 안전한 선택이 됩니다.